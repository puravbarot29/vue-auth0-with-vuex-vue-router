{"ast":null,"code":"// Utils\nimport { defineComponent as _defineComponent, effectScope, getCurrentInstance, shallowReactive, shallowRef, toRaw, watch, watchEffect } from 'vue';\nimport { consoleWarn } from \"./console.mjs\";\nimport { mergeDeep, toKebabCase } from \"./helpers.mjs\";\nimport { injectSelf } from \"./injectSelf.mjs\";\nimport { DefaultsSymbol, provideDefaults, useDefaults } from \"../composables/defaults.mjs\"; // Types\nimport { propsFactory } from \"./propsFactory.mjs\";\nfunction propIsDefined(vnode, prop) {\n  var _vnode$props, _vnode$props2;\n  return ((_vnode$props = vnode.props) == null ? void 0 : _vnode$props.hasOwnProperty(prop)) || ((_vnode$props2 = vnode.props) == null ? void 0 : _vnode$props2.hasOwnProperty(toKebabCase(prop)));\n}\nexport const defineComponent = function defineComponent(options) {\n  options._setup = options._setup ?? options.setup;\n  if (!options.name) {\n    consoleWarn('The component is missing an explicit name, unable to generate default prop value');\n    return options;\n  }\n  if (options._setup) {\n    options.props = options.props ?? {};\n    options.props = propsFactory(options.props, toKebabCase(options.name))();\n    options.props._as = String;\n    options.setup = function setup(props, ctx) {\n      const vm = getCurrentInstance();\n      const defaults = useDefaults();\n      const _subcomponentDefaults = shallowRef();\n      const _props = shallowReactive({\n        ...toRaw(props)\n      });\n      watchEffect(() => {\n        const globalDefaults = defaults.value.global;\n        const componentDefaults = defaults.value[props._as ?? options.name];\n        if (componentDefaults) {\n          const subComponents = Object.entries(componentDefaults).filter(_ref => {\n            let [key] = _ref;\n            return key.startsWith(key[0].toUpperCase());\n          });\n          if (subComponents.length) _subcomponentDefaults.value = Object.fromEntries(subComponents);\n        }\n        for (const prop of Object.keys(props)) {\n          let newVal = props[prop];\n          if (!propIsDefined(vm.vnode, prop)) {\n            newVal = (componentDefaults == null ? void 0 : componentDefaults[prop]) ?? (globalDefaults == null ? void 0 : globalDefaults[prop]) ?? props[prop];\n          }\n          if (_props[prop] !== newVal) {\n            _props[prop] = newVal;\n          }\n        }\n      });\n      const setupBindings = options._setup(_props, ctx);\n      let scope;\n      watch(_subcomponentDefaults, (val, oldVal) => {\n        if (!val && scope) scope.stop();else if (val && !oldVal) {\n          scope = effectScope();\n          scope.run(() => {\n            var _injectSelf;\n            provideDefaults(mergeDeep(((_injectSelf = injectSelf(DefaultsSymbol)) == null ? void 0 : _injectSelf.value) ?? {}, val));\n          });\n        }\n      }, {\n        immediate: true\n      });\n      return setupBindings;\n    };\n  }\n  return options;\n};\nexport function genericComponent() {\n  let exposeDefaults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  return options => (exposeDefaults ? defineComponent : _defineComponent)(options);\n}","map":{"version":3,"mappings":"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","names":["defineComponent","_defineComponent","effectScope","getCurrentInstance","shallowReactive","shallowRef","toRaw","watch","watchEffect","consoleWarn","mergeDeep","toKebabCase","injectSelf","DefaultsSymbol","provideDefaults","useDefaults","propsFactory","propIsDefined","vnode","prop","props","_vnode$props","hasOwnProperty","_vnode$props2","options","_setup","setup","name","_as","String","ctx","vm","defaults","_subcomponentDefaults","_props","globalDefaults","value","global","componentDefaults","subComponents","Object","entries","filter","_ref","key","startsWith","toUpperCase","length","fromEntries","keys","newVal","setupBindings","scope","val","oldVal","stop","run","_injectSelf","immediate","genericComponent","exposeDefaults"],"sources":["../../src/util/defineComponent.tsx"],"sourcesContent":["// Utils\nimport {\n  defineComponent as _defineComponent,\n  effectScope,\n  getCurrentInstance,\n  shallowReactive,\n  shallowRef,\n  toRaw,\n  watch,\n  watchEffect,\n} from 'vue'\nimport { consoleWarn } from '@/util/console'\nimport { mergeDeep, toKebabCase } from '@/util/helpers'\nimport { injectSelf } from '@/util/injectSelf'\nimport { DefaultsSymbol, provideDefaults, useDefaults } from '@/composables/defaults'\n\n// Types\nimport type {\n  ComponentOptions,\n  ComponentOptionsMixin,\n  ComponentOptionsWithObjectProps,\n  ComponentPropsOptions,\n  ComputedOptions,\n  DefineComponent,\n  EffectScope,\n  EmitsOptions,\n  MethodOptions,\n  VNode,\n  VNodeChild,\n} from 'vue'\nimport { propsFactory } from '@/util/propsFactory'\n\nfunction propIsDefined (vnode: VNode, prop: string) {\n  return vnode.props?.hasOwnProperty(prop) ||\n  vnode.props?.hasOwnProperty(toKebabCase(prop))\n}\n\nexport const defineComponent = (function defineComponent (options: ComponentOptions) {\n  options._setup = options._setup ?? options.setup\n\n  if (!options.name) {\n    consoleWarn('The component is missing an explicit name, unable to generate default prop value')\n\n    return options\n  }\n\n  if (options._setup) {\n    options.props = options.props ?? {}\n\n    options.props = propsFactory(options.props, toKebabCase(options.name))()\n\n    options.props._as = String\n    options.setup = function setup (props: Record<string, any>, ctx) {\n      const vm = getCurrentInstance()!\n      const defaults = useDefaults()\n\n      const _subcomponentDefaults = shallowRef()\n      const _props = shallowReactive({ ...toRaw(props) })\n      watchEffect(() => {\n        const globalDefaults = defaults.value.global\n        const componentDefaults = defaults.value[props._as ?? options.name!]\n\n        if (componentDefaults) {\n          const subComponents = Object.entries(componentDefaults).filter(([key]) => key.startsWith(key[0].toUpperCase()))\n          if (subComponents.length) _subcomponentDefaults.value = Object.fromEntries(subComponents)\n        }\n\n        for (const prop of Object.keys(props)) {\n          let newVal = props[prop]\n          if (!propIsDefined(vm.vnode, prop)) {\n            newVal = componentDefaults?.[prop] ?? globalDefaults?.[prop] ?? props[prop]\n          }\n          if (_props[prop] !== newVal) {\n            _props[prop] = newVal\n          }\n        }\n      })\n\n      const setupBindings = options._setup(_props, ctx)\n\n      let scope: EffectScope\n      watch(_subcomponentDefaults, (val, oldVal) => {\n        if (!val && scope) scope.stop()\n        else if (val && !oldVal) {\n          scope = effectScope()\n          scope.run(() => {\n            provideDefaults(mergeDeep(injectSelf(DefaultsSymbol)?.value ?? {}, val))\n          })\n        }\n      }, { immediate: true })\n\n      return setupBindings\n    }\n  }\n\n  return options\n}) as unknown as typeof _defineComponent\n\ntype ToListeners<T extends string | number | symbol> = { [K in T]: K extends `on${infer U}` ? Uncapitalize<U> : K }[T]\n\nexport type SlotsToProps<T extends Record<string, any>> = T extends Record<string, Slot> ? ({\n  $children?: (\n    | VNodeChild\n    | (keyof T extends 'default' ? T['default'] : {})\n    | { [K in keyof T]?: T[K] }\n  )\n  'v-slots'?: { [K in keyof T]?: T[K] | false }\n} & {\n  [K in keyof T as `v-slot:${K & string}`]?: T[K] | false\n}) : T extends Record<string, any[]> ? SlotsToProps<MakeSlots<T>> : never\n\ntype Slot<T extends any[] = any[]> = (...args: T) => VNodeChild\nexport type MakeSlots<T extends Record<string, any[]>> = {\n  [K in keyof T]?: Slot<T[K]>\n}\n\nexport function genericComponent<T extends (new () => {\n  $props?: Record<string, any>\n})> (exposeDefaults = true): <\n  PropsOptions extends Readonly<ComponentPropsOptions>,\n  RawBindings,\n  D,\n  C extends ComputedOptions = {},\n  M extends MethodOptions = {},\n  Mixin extends ComponentOptionsMixin = ComponentOptionsMixin,\n  Extends extends ComponentOptionsMixin = ComponentOptionsMixin,\n  E extends EmitsOptions = Record<string, any>,\n  EE extends string = string,\n  I = InstanceType<T>,\n  Base = DefineComponent<\n    I extends Record<'$props', any>\n      ? Omit<PropsOptions, keyof I['$props']>\n      : PropsOptions,\n    RawBindings,\n    D,\n    C,\n    M,\n    Mixin,\n    Extends,\n    E extends any[] ? E : I extends Record<'$props', any> ? Omit<E, ToListeners<keyof I['$props']>> : E,\n    EE\n  >\n>(options: ComponentOptionsWithObjectProps<PropsOptions, RawBindings, D, C, M, Mixin, Extends, E, EE>) => Base & T {\n  return options => (exposeDefaults ? defineComponent : _defineComponent)(options) as any\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}