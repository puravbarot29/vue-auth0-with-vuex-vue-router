{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from '../views/HomeView.vue';\nimport AboutView from '../views/AboutView.vue';\nimport Contact from '../views/Contact';\nimport Members from '../views/Members';\nimport Login from '../views/Login';\nimport store from '../store/index.js';\nconst routes = [{\n  path: '/',\n  name: 'home',\n  component: HomeView\n}, {\n  path: '/aboutview',\n  name: 'aboutview',\n  component: AboutView\n}, {\n  path: '/contact',\n  name: 'contact',\n  component: Contact\n}, {\n  path: '/login',\n  name: 'login',\n  component: Login\n}, {\n  path: '/members',\n  name: 'members',\n  component: Members,\n  meta: {\n    requiresAuth: true\n  } //re-authenticate user for protected pages\n}];\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\n//basically routes users and ensures that if user is allowed to go or no\nrouter.beforeEach((to, from, next) => {\n  let routerAuthCheck = true;\n  if (routerAuthCheck) {\n    //then commit to the store that user is authenticated\n    store.commit('setUserIsAuthenticated', true);\n  }\n\n  //take the \"to\" and sends each one of them to the record, which requires auth \"meta\"\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    //check if user is authorized\n    if (routerAuthCheck) {\n      //user is authenticated\n      next();\n    } else {\n      //user is not authenticated\n      router.replace('/login');\n    }\n  } else {\n    //this is allow page to load, if we dont call next then route never loads\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","HomeView","AboutView","Contact","Members","Login","store","routes","path","name","component","meta","requiresAuth","router","history","process","env","BASE_URL","beforeEach","to","from","next","routerAuthCheck","commit","matched","some","record","replace"],"sources":["/Users/puravbarot/Documents/GitHub/vue-auth0/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router'\nimport HomeView from '../views/HomeView.vue'\nimport AboutView from '../views/AboutView.vue'\nimport Contact from '../views/Contact'\nimport Members from '../views/Members'\nimport Login from '../views/Login'\nimport store from '../store/index.js'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'home',\n    component: HomeView\n  },\n  {\n    path: '/aboutview',\n    name: 'aboutview',\n    component: AboutView\n  },\n  {\n    path: '/contact',\n    name: 'contact',\n    component: Contact\n  },\n  {\n    path: '/login',\n    name: 'login',\n    component: Login\n  },\n  {\n    path: '/members',\n    name: 'members',\n    component: Members,\n    meta: { requiresAuth: true } //re-authenticate user for protected pages\n  }\n\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\n//basically routes users and ensures that if user is allowed to go or no\nrouter.beforeEach((to,from,next)=>{\nlet routerAuthCheck = true;\n\nif(routerAuthCheck){\n  //then commit to the store that user is authenticated\n  store.commit('setUserIsAuthenticated', true);\n\n}\n\n//take the \"to\" and sends each one of them to the record, which requires auth \"meta\"\n if (to.matched.some(record => record.meta.requiresAuth)){\n   //check if user is authorized\n   if(routerAuthCheck){\n     //user is authenticated\n     next();\n   } else {\n     //user is not authenticated\n     router.replace('/login');\n   }\n\n } else {\n   //this is allow page to load, if we dont call next then route never loads\n   next();\n }\n\n});\n\nexport default router\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,KAAK,MAAM,mBAAmB;AAErC,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAET;AACb,CAAC,EACD;EACEO,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAER;AACb,CAAC,EACD;EACEM,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEP;AACb,CAAC,EACD;EACEK,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEL;AACb,CAAC,EACD;EACEG,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEN,OAAO;EAClBO,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAC;AAC/B,CAAC,CAEF;;AAED,MAAMC,MAAM,GAAGd,YAAY,CAAC;EAC1Be,OAAO,EAAEd,gBAAgB,CAACe,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CV;AACF,CAAC,CAAC;;AAEF;AACAM,MAAM,CAACK,UAAU,CAAC,CAACC,EAAE,EAACC,IAAI,EAACC,IAAI,KAAG;EAClC,IAAIC,eAAe,GAAG,IAAI;EAE1B,IAAGA,eAAe,EAAC;IACjB;IACAhB,KAAK,CAACiB,MAAM,CAAC,wBAAwB,EAAE,IAAI,CAAC;EAE9C;;EAEA;EACC,IAAIJ,EAAE,CAACK,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACf,IAAI,CAACC,YAAY,CAAC,EAAC;IACtD;IACA,IAAGU,eAAe,EAAC;MACjB;MACAD,IAAI,EAAE;IACR,CAAC,MAAM;MACL;MACAR,MAAM,CAACc,OAAO,CAAC,QAAQ,CAAC;IAC1B;EAEF,CAAC,MAAM;IACL;IACAN,IAAI,EAAE;EACR;AAED,CAAC,CAAC;AAEF,eAAeR,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}