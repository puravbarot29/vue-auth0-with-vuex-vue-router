{"ast":null,"code":"import { createStore } from 'vuex';\nimport * as auth0 from 'auth0-js'; //import auth0 dependecy\nimport router from '../router/index.js';\nexport default createStore({\n  state: {\n    userIsAuthorized: false,\n    //auth0 variable and we telling auth0 which tenants to access\n    auth0: new auth0.WebAuth({\n      domain: process.env.VUE_APP_AUTH0_CONFIG_DOMAIN,\n      clientID: process.env.VUE_APP_AUTH0_CONFIG_CLIENTID,\n      redirectUri: process.env.VUE_APP_DOMAINURL + '/auth0callback',\n      //to redirect user back to localhost once user is authenticated\n      responseType: process.env.VUE_APP_AUTH0_CONFIG_RESPONSETYPE,\n      scope: process.env.VUE_APP_AUTH0_CONFIG_SCOPE\n    })\n  },\n  getters: {},\n  mutations: {\n    //changing user state programatically\n    setUserIsAuthenticated(state, replacement) {\n      state.userIsAuthorized = replacement;\n    }\n  },\n  actions: {\n    auth0Login(context) {\n      //this is being called from Login.vue\n      console.log(\"auth0 login\");\n      context.state.auth0.authorize(); //calling auth0\n    },\n\n    //this is the dispatch call from router\n    auth0HandleAuthentication(context) {\n      //authResult variable is populated if auth was successful\n      context.state.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          let expiresAt = JSON.stringify(\n          //expiration varibale to end the session after some time\n          authResult.expiresIn * 1000 + new Date().getTime());\n          // save the tokens locally\n          localStorage.setItem('access_token', authResult.accessToken);\n          localStorage.setItem('id_token', authResult.idToken);\n          localStorage.setItem('expires_at', expiresAt);\n          router.replace('/members'); //send users to their destination\n        } else if (err) {\n          alert('login failed. Error #KJN838');\n          router.replace('/login');\n          console.log(err);\n        }\n      });\n    },\n    auth0Logout() {\n      // No need to update the bearer in global axiosConfig to null because we are redirecting out of the application\n      // Clear Access Token and ID Token from local storage\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('id_token');\n      localStorage.removeItem('expires_at');\n\n      // redirect to auth0 logout to completely log the user out\n      window.location.href = process.env.VUE_APP_AUTH0_CONFIG_DOMAINURL + \"/v2/logout?returnTo=\" + process.env.VUE_APP_DOMAINURL + \"/login&client_id=\" + process.env.VUE_APP_AUTH0_CONFIG_CLIENTID;\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","auth0","router","state","userIsAuthorized","WebAuth","domain","process","env","VUE_APP_AUTH0_CONFIG_DOMAIN","clientID","VUE_APP_AUTH0_CONFIG_CLIENTID","redirectUri","VUE_APP_DOMAINURL","responseType","VUE_APP_AUTH0_CONFIG_RESPONSETYPE","scope","VUE_APP_AUTH0_CONFIG_SCOPE","getters","mutations","setUserIsAuthenticated","replacement","actions","auth0Login","context","console","log","authorize","auth0HandleAuthentication","parseHash","err","authResult","accessToken","idToken","expiresAt","JSON","stringify","expiresIn","Date","getTime","localStorage","setItem","replace","alert","auth0Logout","removeItem","window","location","href","VUE_APP_AUTH0_CONFIG_DOMAINURL","modules"],"sources":["/Users/puravbarot/Documents/GitHub/vue-auth0/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport * as auth0 from 'auth0-js' //import auth0 dependecy\nimport router from '../router/index.js'\n\nexport default createStore({\n  state: {\n    userIsAuthorized: false,\n\n    //auth0 variable and we telling auth0 which tenants to access\n    auth0: new auth0.WebAuth({\n        domain: process.env.VUE_APP_AUTH0_CONFIG_DOMAIN,\n        clientID: process.env.VUE_APP_AUTH0_CONFIG_CLIENTID,\n        redirectUri: process.env.VUE_APP_DOMAINURL + '/auth0callback',//to redirect user back to localhost once user is authenticated\n        responseType: process.env.VUE_APP_AUTH0_CONFIG_RESPONSETYPE,\n        scope: process.env.VUE_APP_AUTH0_CONFIG_SCOPE,\n      }),\n  },\n  getters: {\n  },\n  mutations: {\n    //changing user state programatically\n    setUserIsAuthenticated(state, replacement){\n      state.userIsAuthorized = replacement;\n    }\n  },\n  actions: {\n\n    auth0Login(context){\n      //this is being called from Login.vue\n      console.log(\"auth0 login\");\n      context.state.auth0.authorize(); //calling auth0\n    },\n    //this is the dispatch call from router\n    auth0HandleAuthentication (context) {\n      //authResult variable is populated if auth was successful\n      context.state.auth0.parseHash((err, authResult) => {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          let expiresAt = JSON.stringify( //expiration varibale to end the session after some time\n            authResult.expiresIn * 1000 + new Date().getTime()\n          )\n          // save the tokens locally\n          localStorage.setItem('access_token', authResult.accessToken);\n          localStorage.setItem('id_token', authResult.idToken);\n          localStorage.setItem('expires_at', expiresAt);\n\n          router.replace('/members'); //send users to their destination\n        }\n        else if (err) {\n          alert('login failed. Error #KJN838');\n          router.replace('/login');\n          console.log(err);\n        }\n      })\n    },\n    auth0Logout () {\n      // No need to update the bearer in global axiosConfig to null because we are redirecting out of the application\n      // Clear Access Token and ID Token from local storage\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('id_token');\n      localStorage.removeItem('expires_at');\n\n      // redirect to auth0 logout to completely log the user out\n      window.location.href = process.env.VUE_APP_AUTH0_CONFIG_DOMAINURL + \"/v2/logout?returnTo=\" + process.env.VUE_APP_DOMAINURL + \"/login&client_id=\" + process.env.VUE_APP_AUTH0_CONFIG_CLIENTID;\n    },\n\n  },\n  modules: {\n  }\n})\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAO,KAAKC,KAAK,MAAM,UAAU,EAAC;AAClC,OAAOC,MAAM,MAAM,oBAAoB;AAEvC,eAAeF,WAAW,CAAC;EACzBG,KAAK,EAAE;IACLC,gBAAgB,EAAE,KAAK;IAEvB;IACAH,KAAK,EAAE,IAAIA,KAAK,CAACI,OAAO,CAAC;MACrBC,MAAM,EAAEC,OAAO,CAACC,GAAG,CAACC,2BAA2B;MAC/CC,QAAQ,EAAEH,OAAO,CAACC,GAAG,CAACG,6BAA6B;MACnDC,WAAW,EAAEL,OAAO,CAACC,GAAG,CAACK,iBAAiB,GAAG,gBAAgB;MAAC;MAC9DC,YAAY,EAAEP,OAAO,CAACC,GAAG,CAACO,iCAAiC;MAC3DC,KAAK,EAAET,OAAO,CAACC,GAAG,CAACS;IACrB,CAAC;EACL,CAAC;EACDC,OAAO,EAAE,CACT,CAAC;EACDC,SAAS,EAAE;IACT;IACAC,sBAAsB,CAACjB,KAAK,EAAEkB,WAAW,EAAC;MACxClB,KAAK,CAACC,gBAAgB,GAAGiB,WAAW;IACtC;EACF,CAAC;EACDC,OAAO,EAAE;IAEPC,UAAU,CAACC,OAAO,EAAC;MACjB;MACAC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1BF,OAAO,CAACrB,KAAK,CAACF,KAAK,CAAC0B,SAAS,EAAE,CAAC,CAAC;IACnC,CAAC;;IACD;IACAC,yBAAyB,CAAEJ,OAAO,EAAE;MAClC;MACAA,OAAO,CAACrB,KAAK,CAACF,KAAK,CAAC4B,SAAS,CAAC,CAACC,GAAG,EAAEC,UAAU,KAAK;QACjD,IAAIA,UAAU,IAAIA,UAAU,CAACC,WAAW,IAAID,UAAU,CAACE,OAAO,EAAE;UAC9D,IAAIC,SAAS,GAAGC,IAAI,CAACC,SAAS;UAAE;UAC9BL,UAAU,CAACM,SAAS,GAAG,IAAI,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE,CACnD;UACD;UACAC,YAAY,CAACC,OAAO,CAAC,cAAc,EAAEV,UAAU,CAACC,WAAW,CAAC;UAC5DQ,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEV,UAAU,CAACE,OAAO,CAAC;UACpDO,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEP,SAAS,CAAC;UAE7ChC,MAAM,CAACwC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;QAC9B,CAAC,MACI,IAAIZ,GAAG,EAAE;UACZa,KAAK,CAAC,6BAA6B,CAAC;UACpCzC,MAAM,CAACwC,OAAO,CAAC,QAAQ,CAAC;UACxBjB,OAAO,CAACC,GAAG,CAACI,GAAG,CAAC;QAClB;MACF,CAAC,CAAC;IACJ,CAAC;IACDc,WAAW,GAAI;MACb;MACA;MACAJ,YAAY,CAACK,UAAU,CAAC,cAAc,CAAC;MACvCL,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC;MACnCL,YAAY,CAACK,UAAU,CAAC,YAAY,CAAC;;MAErC;MACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGzC,OAAO,CAACC,GAAG,CAACyC,8BAA8B,GAAG,sBAAsB,GAAG1C,OAAO,CAACC,GAAG,CAACK,iBAAiB,GAAG,mBAAmB,GAAGN,OAAO,CAACC,GAAG,CAACG,6BAA6B;IAC9L;EAEF,CAAC;EACDuC,OAAO,EAAE,CACT;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}