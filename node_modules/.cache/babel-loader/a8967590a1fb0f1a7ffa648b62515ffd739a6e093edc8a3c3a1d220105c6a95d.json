{"ast":null,"code":"import { createRouter, createWebHistory } from 'vue-router';\nimport HomeView from '../views/HomeView.vue';\nimport AboutView from '../views/AboutView.vue';\nimport Contact from '../views/Contact';\nimport Members from '../views/Members';\nimport Login from '../views/Login';\nimport store from '../store/index.js';\nimport Auth0callback from '../views/Auth0callback';\nconst routes = [{\n  path: '/auth0callback',\n  name: 'auth0callback',\n  component: Auth0callback\n}, {\n  path: '/',\n  name: 'home',\n  component: HomeView\n}, {\n  path: '/aboutview',\n  name: 'aboutview',\n  component: AboutView\n}, {\n  path: '/contact',\n  name: 'contact',\n  component: Contact\n}, {\n  path: '/login',\n  name: 'login',\n  component: Login\n}, {\n  path: '/members',\n  name: 'members',\n  component: Members,\n  meta: {\n    requiresAuth: true\n  } //re-authenticate user for protected pages\n}];\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n});\n\n//basically routes users and ensures that if user is allowed to go or no\nrouter.beforeEach((to, from, next) => {\n  // Allow finishing callback url for logging in\n  if (to.matched.some(record => record.path == \"/auth0callback\")) {\n    console.log(\"router.beforeEach found /auth0callback url\");\n    Store.dispatch('auth0HandleAuthentication');\n    next(false);\n  }\n\n  // check if user is logged in (start assuming the user is not logged in = false)\n  let routerAuthCheck = false;\n  // Verify all the proper access variables are present for proper authorization\n  if (localStorage.getItem('access_token') && localStorage.getItem('id_token') && localStorage.getItem('expires_at')) {\n    console.log('found local storage tokens');\n    // Check whether the current time is past the Access Token's expiry time\n    let expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n    // set localAuthTokenCheck true if unexpired / false if expired\n    routerAuthCheck = new Date().getTime() < expiresAt;\n  }\n\n  // set global ui understanding of authentication\n  Store.commit('setUserIsAuthenticated', routerAuthCheck);\n\n  //take the \"to\" and sends each one of them to the record, which requires auth \"meta\"\n  if (to.matched.some(record => record.meta.requiresAuth)) {\n    //check if user is authorized\n    if (routerAuthCheck) {\n      //user is authenticated\n      next();\n    } else {\n      //user is not authenticated\n      router.replace('/login');\n    }\n  } else {\n    //this is allow page to load, if we dont call next then route never loads\n    next();\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHistory","HomeView","AboutView","Contact","Members","Login","store","Auth0callback","routes","path","name","component","meta","requiresAuth","router","history","process","env","BASE_URL","beforeEach","to","from","next","matched","some","record","console","log","Store","dispatch","routerAuthCheck","localStorage","getItem","expiresAt","JSON","parse","Date","getTime","commit","replace"],"sources":["/Users/puravbarot/Documents/GitHub/vue-auth0/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHistory } from 'vue-router'\nimport HomeView from '../views/HomeView.vue'\nimport AboutView from '../views/AboutView.vue'\nimport Contact from '../views/Contact'\nimport Members from '../views/Members'\nimport Login from '../views/Login'\nimport store from '../store/index.js'\nimport Auth0callback from '../views/Auth0callback'\n\nconst routes = [\n  {\n    path: '/auth0callback',\n    name: 'auth0callback',\n    component: Auth0callback\n  },\n  {\n    path: '/',\n    name: 'home',\n    component: HomeView\n  },\n  {\n    path: '/aboutview',\n    name: 'aboutview',\n    component: AboutView\n  },\n  {\n    path: '/contact',\n    name: 'contact',\n    component: Contact\n  },\n  {\n    path: '/login',\n    name: 'login',\n    component: Login\n  },\n  {\n    path: '/members',\n    name: 'members',\n    component: Members,\n    meta: { requiresAuth: true } //re-authenticate user for protected pages\n  }\n\n]\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\n\n//basically routes users and ensures that if user is allowed to go or no\nrouter.beforeEach((to,from,next)=>{\n  // Allow finishing callback url for logging in\n  if(to.matched.some(record=>record.path == \"/auth0callback\")){\n   console.log(\"router.beforeEach found /auth0callback url\");\n   Store.dispatch('auth0HandleAuthentication');\n   next(false);\n }\n\n  // check if user is logged in (start assuming the user is not logged in = false)\n  let routerAuthCheck = false;\n  // Verify all the proper access variables are present for proper authorization\n  if( localStorage.getItem('access_token') && localStorage.getItem('id_token') && localStorage.getItem('expires_at') ){\n    console.log('found local storage tokens');\n    // Check whether the current time is past the Access Token's expiry time\n    let expiresAt = JSON.parse(localStorage.getItem('expires_at'));\n    // set localAuthTokenCheck true if unexpired / false if expired\n    routerAuthCheck = new Date().getTime() < expiresAt;\n  }\n\n   // set global ui understanding of authentication\n   Store.commit('setUserIsAuthenticated', routerAuthCheck); \n\n//take the \"to\" and sends each one of them to the record, which requires auth \"meta\"\n if (to.matched.some(record => record.meta.requiresAuth)){\n   //check if user is authorized\n   if(routerAuthCheck){\n     //user is authenticated\n     next();\n   } else {\n     //user is not authenticated\n     router.replace('/login');\n   }\n\n } else {\n   //this is allow page to load, if we dont call next then route never loads\n   next();\n }\n\n});\n\nexport default router\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,gBAAgB,QAAQ,YAAY;AAC3D,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,KAAK,MAAM,mBAAmB;AACrC,OAAOC,aAAa,MAAM,wBAAwB;AAElD,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,gBAAgB;EACtBC,IAAI,EAAE,eAAe;EACrBC,SAAS,EAAEJ;AACb,CAAC,EACD;EACEE,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEV;AACb,CAAC,EACD;EACEQ,IAAI,EAAE,YAAY;EAClBC,IAAI,EAAE,WAAW;EACjBC,SAAS,EAAET;AACb,CAAC,EACD;EACEO,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAER;AACb,CAAC,EACD;EACEM,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEN;AACb,CAAC,EACD;EACEI,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,SAAS;EACfC,SAAS,EAAEP,OAAO;EAClBQ,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAC;AAC/B,CAAC,CAEF;;AAED,MAAMC,MAAM,GAAGf,YAAY,CAAC;EAC1BgB,OAAO,EAAEf,gBAAgB,CAACgB,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;EAC/CV;AACF,CAAC,CAAC;;AAEF;AACAM,MAAM,CAACK,UAAU,CAAC,CAACC,EAAE,EAACC,IAAI,EAACC,IAAI,KAAG;EAChC;EACA,IAAGF,EAAE,CAACG,OAAO,CAACC,IAAI,CAACC,MAAM,IAAEA,MAAM,CAAChB,IAAI,IAAI,gBAAgB,CAAC,EAAC;IAC3DiB,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;IACzDC,KAAK,CAACC,QAAQ,CAAC,2BAA2B,CAAC;IAC3CP,IAAI,CAAC,KAAK,CAAC;EACb;;EAEC;EACA,IAAIQ,eAAe,GAAG,KAAK;EAC3B;EACA,IAAIC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAID,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAID,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,EAAE;IAClHN,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzC;IACA,IAAIM,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACJ,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC,CAAC;IAC9D;IACAF,eAAe,GAAG,IAAIM,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGJ,SAAS;EACpD;;EAEC;EACAL,KAAK,CAACU,MAAM,CAAC,wBAAwB,EAAER,eAAe,CAAC;;EAE1D;EACC,IAAIV,EAAE,CAACG,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACb,IAAI,CAACC,YAAY,CAAC,EAAC;IACtD;IACA,IAAGiB,eAAe,EAAC;MACjB;MACAR,IAAI,EAAE;IACR,CAAC,MAAM;MACL;MACAR,MAAM,CAACyB,OAAO,CAAC,QAAQ,CAAC;IAC1B;EAEF,CAAC,MAAM;IACL;IACAjB,IAAI,EAAE;EACR;AAED,CAAC,CAAC;AAEF,eAAeR,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}